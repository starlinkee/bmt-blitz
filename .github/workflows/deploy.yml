name: Deploy to Small.pl

on:
  push:
    branches: [ master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e

            echo "▶ Przechodzenie do katalogu projektu"
            cd ~/domains/bmt.googlenfc.smallhost.pl/public_nodejs

            echo "▶ Pobieranie najnowszego kodu"
            git reset --hard HEAD
            git pull origin master

            echo "▶ Instalowanie zależności frontendu (pełne, z dev)"
            npm --prefix frontend install

            echo "▶ Ustawianie pliku .env dla frontendu"
            cp frontend/env.production frontend/.env

            echo "▶ Budowanie frontendu"
            npm --prefix frontend run build

            echo "▶ Kopiowanie plików do public/"
            rm -rf public/*
            cp -r frontend/dist/* public/

            echo "▶ Instalowanie zależności backendu"
            npm --prefix backend install --omit=dev

            echo "▶ Sprawdzanie zmiennych środowiskowych"
            cd backend
            # Sprawdź czy .env istnieje, jeśli nie - utwórz z NODE_ENV
            if [ ! -f .env ]; then
              echo "NODE_ENV=production" > .env
              echo "⚠️  Utworzono plik .env - ustaw DATABASE_URL i SESSION_SECRET ręcznie"
            else
              # Dodaj/aktualizuj tylko NODE_ENV
              if grep -q "NODE_ENV" .env; then
                # Użyj sed z flagą -i.bak dla kompatybilności
                sed -i.bak 's/NODE_ENV=.*/NODE_ENV=production/' .env
                rm -f .env.bak
              else
                echo "NODE_ENV=production" >> .env
              fi
              echo "✅ Zaktualizowano NODE_ENV w istniejącym pliku .env"
            fi

            echo "▶ Synchronizacja bazy danych"
            node -e "
            import('./db.js').then(async ({db}) => {
              console.log('🔄 Synchronizacja bazy danych...');
              await db.authenticate();
              
              // Załaduj modele przed synchronizacją
              await import('./models/index.js');
              
              await db.sync({force: false});
              console.log('✅ Baza danych zsynchronizowana');
              process.exit(0);
            }).catch(err => {
              console.error('❌ Błąd synchronizacji:', err);
              process.exit(1);
            });
            "

            echo "▶ Sprawdzanie czy kolumna media_template_id już istnieje"
            if node -e "
              import('./db.js').then(({ db }) => {
                return db.query('SELECT column_name FROM information_schema.columns WHERE table_name = \'media_records\' AND column_name = \'media_template_id\'');
              }).then(([results]) => {
                if (results.length === 0) {
                  console.log('Kolumna nie istnieje - dodaję...');
                  process.exit(1);
                } else {
                  console.log('Kolumna już istnieje');
                  process.exit(0);
                }
              }).catch(err => {
                console.error('Błąd sprawdzania:', err);
                process.exit(1);
              });
            "; then
              echo "✅ Kolumna media_template_id już istnieje"
            else
              echo "▶ Dodawanie kolumny media_template_id"
              node scripts/addMediaTemplateIdColumn.js
            fi

            echo "▶ Sprawdzanie czy dane mediów już istnieją"
            if node -e "
              import('./models/index.js').then(({ MediaType }) => {
                return MediaType.findOne();
              }).then(type => {
                if (type) {
                  console.log('Dane mediów już istnieją');
                  process.exit(0);
                } else {
                  console.log('Brak danych mediów - dodaję...');
                  process.exit(1);
                }
              }).catch(err => {
                console.error('Błąd sprawdzania:', err);
                process.exit(1);
              });
            "; then
              echo "✅ Dane mediów już istnieją"
            else
              echo "▶ Dodawanie danych mediów"
              node scripts/seedMediaData.js
            fi

            echo "▶ Sprawdzanie czy app.js istnieje"
            if [ ! -f app.js ]; then
              echo "⚠️  Brak app.js - tworzę..."
              echo "import app from './src/server.js'; export default app;" > app.js
            fi

            echo "▶ Restartowanie Passenger"
            cd ..
            touch tmp/restart.txt
