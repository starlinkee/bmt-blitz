import { Client } from '../models/Client.js';
import { InvoiceBatch } from '../models/InvoiceBatch.js';
import { generateInvoicePDF } from './generateInvoicePDF.js';
import { sendInvoiceEmail } from './sendInvoice.js';

export async function sendMonthlyInvoices() {
  const now = new Date();
  const year = now.getFullYear();
  const month = String(now.getMonth() + 1).padStart(2, '0');
  const monthKey = `${year}-${month}`; // np. 2025-06

  // üîé Sprawd≈∫, czy ju≈º wys≈Çano faktury za ten miesiƒÖc
  const existingBatch = await InvoiceBatch.findOne({
    where: { month: monthKey }
  });

  if (existingBatch) {
    return { success: false, message: `Faktury za ${monthKey} ju≈º zosta≈Çy wys≈Çane.` };
  }

  // üì§ Pobierz klient√≥w
  const clients = await Client.findAll();
  if (clients.length === 0) {
    return { success: false, message: 'Brak klient√≥w do fakturowania.' };
  }

  for (const [index, client] of clients.entries()) {
    const invoiceNumber = `${year}-${month}-${String(index + 1).padStart(3, '0')}`;
    
    // Konwertuj rent ze stringa na liczbƒô (Sequelize DECIMAL zwraca string)
    const rentAmount = parseFloat(client.rent);

    const invoiceData = {
      invoiceNumber,
      issueDate: now.toISOString().slice(0, 10),
      dueDate: `${year}-${month}-20`,
      period: monthKey,
      clientName: client.name,
      clientCompany: client.name, // mo≈ºesz rozdzieliƒá je≈õli masz firmƒô osobno
      clientAddress: client.address,
      sellerName: 'Jerzy Bobi≈Ñski',
      sellerAddress: 'ul. Jana Paw≈Ça II 66 lok. 2, 47-232 Kƒôdzierzyn-Ko≈∫le',
      sellerNIP: '7491021184',
      description: `Op≈Çata za wynajem lokalu ‚Äì ${monthKey}`,
      itemDescription: `Czynsz ‚Äì ${monthKey}`,
      quantity: '1',
      unit: 'm-c',
      unitPrice: rentAmount.toFixed(2),
      totalNet: rentAmount.toFixed(2),
      totalGross: rentAmount.toFixed(2),
      amountInWords: toWords(rentAmount),
      bankAccount: '22 1240 1659 1111 0010 2591 2002',
      placeOfIssue: 'Kƒôdzierzyn-Ko≈∫le'
    };

    const pdfPath = await generateInvoicePDF(invoiceData);
    await sendInvoiceEmail(client.email, pdfPath);
  }

  // ‚úÖ Zapisz log wysy≈Çki
  await InvoiceBatch.create({
    month: monthKey,
    sent_at: new Date()
  });

  return { success: true, message: `Faktury za ${monthKey} zosta≈Çy pomy≈õlnie wys≈Çane.` };
}

// Pomocnicza funkcja ‚Äì zamie≈Ñ liczbƒô na s≈Çownie
function toWords(value) {
  const [z≈Ç, gr] = value.toFixed(2).split('.');
  return `s≈Çownie: ${parseInt(z≈Ç)} z≈Ç ${gr}/100`; // Mo≈ºesz u≈ºyƒá biblioteki pe≈Çnej np. 'slownie'
}
